esphome:
  name: esp32_six_shutters
  platform: ESP32
  board: esp32doit-devkit-v1

wifi:
  ssid: "YOUR_SSID"
  password: "YOUR_PASSWORD"

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "YOUR_SSID"
    password: "YOUR_PASSWORD"

captive_portal:

# Enable logging
logger:

# Enable Home Assistant API
api:

ota:

# status_led:
  # pin:
    # number: GPIO2
    # inverted: True

binary_sensor:
- platform: gpio  #############################################
  pin:
    number: GPIO3    # ---
    mode: INPUT_PULLUP
    inverted: true
  filters:
    - delayed_on: 50ms
    - delayed_off: 50ms
  id: button_open_1
  on_press:
    then:
      # logic for cycling through movements: open->stop->close->stop->...
      - lambda: |
          if (id(my_cover_1).current_operation == COVER_OPERATION_IDLE)  
            {
               id(my_cover_1).open();
            } 
          else 
            {
               id(my_cover_1).stop();   // Cover is opening/closing. Stop it
            }
- platform: gpio
  pin:
    number: GPIO17  # ---
    mode: INPUT_PULLUP
    inverted: true
  filters:
    - delayed_on: 50ms
    - delayed_off: 50ms
  id: button_close_1
  on_press:
    then:
      # logic for cycling through movements: open->stop->close->stop->...
      - lambda: |
          if (id(my_cover_1).current_operation == COVER_OPERATION_IDLE)  
            {
               id(my_cover_1).close();
            } 
          else 
            {
               id(my_cover_1).stop();   // Cover is opening/closing. Stop it
            }
- platform: gpio  #############################################
  pin:
    number: GPIO16    # ---
    mode: INPUT_PULLUP
    inverted: true
  filters:
    - delayed_on: 50ms
    - delayed_off: 50ms
  id: button_open_2
  on_press:
    then:
      # logic for cycling through movements: open->stop->close->stop->...
      - lambda: |
          if (id(my_cover_2).current_operation == COVER_OPERATION_IDLE)  
            {
               id(my_cover_2).open();
            } 
          else 
            {
               id(my_cover_2).stop();   // Cover is opening/closing. Stop it
            }
- platform: gpio
  pin:
    number: GPIO4  # ---
    mode: INPUT_PULLUP
    inverted: true
  filters:
    - delayed_on: 50ms
    - delayed_off: 50ms
  id: button_close_2
  on_press:
    then:
      # logic for cycling through movements: open->stop->close->stop->...
      - lambda: |
          if (id(my_cover_2).current_operation == COVER_OPERATION_IDLE)  
            {
               id(my_cover_2).close();
            } 
          else 
            {
               id(my_cover_2).stop();   // Cover is opening/closing. Stop it
            }         
#- platform: gpio  #############################################
  # pin:
    # number: GPIO1    # NON HO PIN DISPONIBILI PER CUI USO IL PIN SOTTO CON PRESSIONE LUNGA PER DOPPIO USO
    # mode: INPUT_PULLUP
    # inverted: true
  # filters:
    # - delayed_on: 50ms
    # - delayed_off: 50ms
  # id: button_open_3
  # on_press:
    # then:
      # # logic for cycling through movements: open->stop->close->stop->...
      # - lambda: |
          # if (id(my_cover_3).current_operation == COVER_OPERATION_IDLE)  
            # {
               # id(my_cover_3).open();
            # } 
          # else 
            # {
               # id(my_cover_3).stop();   // Cover is opening/closing. Stop it
            # }
- platform: gpio
  pin:
    number: GPIO15  # ---
    mode: INPUT_PULLUP
    inverted: true
  filters:
    - delayed_on: 50ms
    - delayed_off: 50ms
  id: button_close_3
  on_click:
  - min_length: 50ms
    max_length: 500ms
    then:
      # logic for cycling through movements: open->stop->close->stop->...
      - lambda: |
          if (id(my_cover_3).current_operation == COVER_OPERATION_IDLE)  
            {
               id(my_cover_3).close();
            } 
          else 
            {
               id(my_cover_3).stop();   // Cover is opening/closing. Stop it
            }  
  - min_length: 700ms
    max_length: 2000ms
    then:    
       # logic for cycling through movements: open->stop->close->stop->...
      - lambda: |
          if (id(my_cover_3).current_operation == COVER_OPERATION_IDLE)  
            {
               id(my_cover_3).open();
            } 
          else 
            {
               id(my_cover_3).stop();   // Cover is opening/closing. Stop it
            }
- platform: gpio  #############################################
  pin:
    number: GPIO36    # ---
    mode: INPUT_PULLUP
    inverted: true
  filters:
    - delayed_on: 50ms
    - delayed_off: 50ms
  id: button_open_4
  on_press:
    then:
      # logic for cycling through movements: open->stop->close->stop->...
      - lambda: |
          if (id(my_cover_4).current_operation == COVER_OPERATION_IDLE)  
            {
               id(my_cover_4).open();
            } 
          else 
            {
               id(my_cover_4).stop();   // Cover is opening/closing. Stop it
            }
- platform: gpio
  pin:
    number: GPIO39  # ---
    mode: INPUT_PULLUP
    inverted: true
  filters:
    - delayed_on: 50ms
    - delayed_off: 50ms
  id: button_close_4
  on_press:
    then:
      # logic for cycling through movements: open->stop->close->stop->...
      - lambda: |
          if (id(my_cover_4).current_operation == COVER_OPERATION_IDLE)  
            {
               id(my_cover_4).close();
            } 
          else 
            {
               id(my_cover_4).stop();   // Cover is opening/closing. Stop it
            }                    
- platform: gpio  #############################################
  pin:
    number: GPIO34    # ---
    mode: INPUT_PULLUP
    inverted: true
  filters:
    - delayed_on: 50ms
    - delayed_off: 50ms
  id: button_open_5
  on_press:
    then:
      # logic for cycling through movements: open->stop->close->stop->...
      - lambda: |
          if (id(my_cover_5).current_operation == COVER_OPERATION_IDLE)  
            {
               id(my_cover_5).open();
            } 
          else 
            {
               id(my_cover_5).stop();   // Cover is opening/closing. Stop it
            }
- platform: gpio
  pin:
    number: GPIO35  # ---
    mode: INPUT_PULLUP
    inverted: true
  filters:
    - delayed_on: 50ms
    - delayed_off: 50ms
  id: button_close_5
  on_press:
    then:
      # logic for cycling through movements: open->stop->close->stop->...
      - lambda: |
          if (id(my_cover_5).current_operation == COVER_OPERATION_IDLE)  
            {
               id(my_cover_5).close();
            } 
          else 
            {
               id(my_cover_5).stop();   // Cover is opening/closing. Stop it
            }    
- platform: gpio  #############################################
  pin:
    number: GPIO32    # ---
    mode: INPUT_PULLUP
    inverted: true
  filters:
    - delayed_on: 50ms
    - delayed_off: 50ms
  id: button_open_6
  on_press:
    then:
      # logic for cycling through movements: open->stop->close->stop->...
      - lambda: |
          if (id(my_cover_6).current_operation == COVER_OPERATION_IDLE)  
            {
               id(my_cover_6).open();
            } 
          else 
            {
               id(my_cover_6).stop();   // Cover is opening/closing. Stop it
            }
- platform: gpio
  pin:
    number: GPIO33  # ---
    mode: INPUT_PULLUP
    inverted: true
  filters:
    - delayed_on: 50ms
    - delayed_off: 50ms
  id: button_close_6
  on_press:
    then:
      # logic for cycling through movements: open->stop->close->stop->...
      - lambda: |
          if (id(my_cover_6).current_operation == COVER_OPERATION_IDLE)  
            {
               id(my_cover_6).close();
            } 
          else 
            {
               id(my_cover_6).stop();   // Cover is opening/closing. Stop it
            }                                
            
            
switch:
- platform: gpio
  pin: GPIO23
  id: on_cover_1
- platform: gpio
  pin: GPIO22
  id: dir_cover_1
  
- platform: gpio
  pin: GPIO21
  id: on_cover_2
- platform: gpio
  pin: GPIO19
  id: dir_cover_2 
  
- platform: gpio
  pin: GPIO18
  id: on_cover_3
- platform: gpio
  pin: GPIO5
  id: dir_cover_3
  
- platform: gpio
  pin: GPIO26
  id: on_cover_4
- platform: gpio
  pin: GPIO25
  id: dir_cover_4 
  
- platform: gpio
  pin: GPIO14
  id: on_cover_5
- platform: gpio
  pin: GPIO27
  id: dir_cover_5
  
- platform: gpio
  pin: GPIO13
  id: on_cover_6
- platform: gpio
  pin: GPIO12
  id: dir_cover_6  
  

cover:
- platform: time_based
  name: "Tapparella 1"
  id: my_cover_1
  open_action:
    - switch.turn_on: on_cover_1
  open_duration: 24s
  close_action:
    - switch.turn_on: on_cover_1
    - switch.turn_on: dir_cover_1
  close_duration: 22s
  stop_action:
    - switch.turn_off: on_cover_1
    - switch.turn_off: dir_cover_1
    
- platform: time_based
  name: "Tapparella 2"
  id: my_cover_2
  open_action:
    - switch.turn_on: on_cover_2
  open_duration: 24s
  close_action:
    - switch.turn_on: on_cover_2
    - switch.turn_on: dir_cover_2
  close_duration: 22s
  stop_action:
    - switch.turn_off: on_cover_2
    - switch.turn_off: dir_cover_2
    
- platform: time_based
  name: "Tapparella 3"
  id: my_cover_3
  open_action:
    - switch.turn_on: on_cover_3
  open_duration: 24s
  close_action:
    - switch.turn_on: on_cover_3
    - switch.turn_on: dir_cover_3
  close_duration: 22s
  stop_action:
    - switch.turn_off: on_cover_3
    - switch.turn_off: dir_cover_3    
    
- platform: time_based
  name: "Tapparella 4"
  id: my_cover_4
  open_action:
    - switch.turn_on: on_cover_4
  open_duration: 24s
  close_action:
    - switch.turn_on: on_cover_4
    - switch.turn_on: dir_cover_4
  close_duration: 22s
  stop_action:
    - switch.turn_off: on_cover_4
    - switch.turn_off: dir_cover_4   
    
- platform: time_based
  name: "Tapparella 5"
  id: my_cover_5
  open_action:
    - switch.turn_on: on_cover_5
  open_duration: 24s
  close_action:
    - switch.turn_on: on_cover_5
    - switch.turn_on: dir_cover_5
  close_duration: 22s
  stop_action:
    - switch.turn_off: on_cover_5
    - switch.turn_off: dir_cover_5 
    
- platform: time_based
  name: "Tapparella 6"
  id: my_cover_6
  open_action:
    - switch.turn_on: on_cover_6
  open_duration: 24s
  close_action:
    - switch.turn_on: on_cover_6
    - switch.turn_on: dir_cover_6
  close_duration: 22s
  stop_action:
    - switch.turn_off: on_cover_6
    - switch.turn_off: dir_cover_6
    
    